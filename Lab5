Program no 5:
Create a Spring Boot Application using Maven Plugin
- Write a REST Controller API using Spring Annotations to validate the user input for
-Product details using POST, PUT methods.
- Using Postman invoke the REST Controller to demonstrate end to end working


Product.java:
package com.example.RestExample_validate;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
public class Product {
 private Long id;
@NotBlank(message = "Name is required")
private String name;
@NotNull(message = "Price is required")
private Double price;
public Long getId() {
      return id;
    }
public void setId(Long id) {
      this.id = id;
    }
public String getName() {
      return name;
    }
public void setName(String name) {
      this.name = name;
    }
public Double getPrice() {
      return price;
    }
public void setPrice(Double price) {
      this.price = price;
    }
}


ProductController.java:
package com.example.RestExample_validate;
//All imports
@RestController
@RequestMapping("/api/products")
public class ProductController {
 private final List<Product> products = new ArrayList<>();
 @PostMapping
 public ResponseEntity<?> addProduct(@Valid @RequestBody Product product, BindingResult 
result) {
 if (result.hasErrors()) {
 List<String> errors = new ArrayList<>();
 result.getFieldErrors().forEach(error -> errors.add(error.getField() + ": " + 
error.getDefaultMessage()));
 return ResponseEntity.badRequest().body(errors);
 }
 product.setId((long) (products.size() + 1));
 products.add(product);
 return ResponseEntity.status(HttpStatus.CREATED).body(product);
 }
 @PutMapping("/{id}")
 public ResponseEntity<?> updateProduct(@PathVariable Long id, @Valid @RequestBody 
Product updatedProduct, BindingResult result) {
 if (result.hasErrors()) {
 List<String> errors = new ArrayList<>();
 result.getFieldErrors().forEach(error -> errors.add(error.getField() + ": " + 
error.getDefaultMessage()));
 return ResponseEntity.badRequest().body(errors);
 }
 Product productToUpdate = products.stream()
 .filter(p -> p.getId().equals(id))
 .findFirst()
 .orElse(null);
 if (productToUpdate != null) {
 productToUpdate.setName(updatedProduct.getName());
 productToUpdate.setPrice(updatedProduct.getPrice());
 return ResponseEntity.ok(productToUpdate);
 } else {
 return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Product not found");
 }
 }
}


main class:
package com.example.RestExample_validate;
//imports
@SpringBootApplication
public class RestExampleValidateApplication {
public static void main(String[] args) {
SpringApplication.run(RestExampleValidateApplication.class, args);
}
}
--------------------------------end of the program---------------------------------------------------------------
