package com.example.jpaLab07;
import java.util.*;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
@SpringBootApplication
public class JpaLab07Application {
public static void main(String[] args) {
ApplicationContext ac=SpringApplication.run(JpaLab07Application.class, args);
StudentService ss=ac.getBean(StudentService.class);
ss.insertStudent(0,"SK", "LBS");
ss.insertStudent(0,"HV", "Vinobha Nagar");
List<Student> s=ss.displayStudents();
System.out.println(s);
ss.deleteStudentById(1);
List<Student> s1=ss.displayStudents();
System.out.println(s1);
ss.updateStudent(2, "Sanjana", "LBS");
List<Student> s2=ss.displayStudents();
System.out.println(s2);
}
}
package com.example.jpaLab07;
import jakarta.annotation.Generated;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
@Entity
@Table(name="student")
public class Student {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
int id;
String name,addr;
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {
return name;}
public void setName(String name) {
this.name = name;
}
public String getAddr() {
return addr;
}
public void setAddr(String addr) {
this.addr = addr;
}
@Override
public String toString() {
return "Student [id=" + id + ", name=" + name + ", addr=" + addr + "]";
}
}
package com.example.jpaLab07;
import org.springframework.data.jpa.repository.JpaRepository;
public interface StudentRepoInt extends JpaRepository<Student, Integer> {
}
package com.example.jpaLab07;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
@Service
public class StudentService {
@Autowired
public StudentRepoInt sri;
void insertStudent(int id,String name,String addr) {
Student s=new Student();
s.setId(id);
s.setAddr(addr);
s.setName(name);
sri.save(s);
}
List<Student> displayStudents()
{
return sri.findAll();
}List<Student> findStudentsByIds(List<Integer> ids) {
return sri.findAllById(ids);
}
Optional<Student> findStudentById(Integer id) {
return sri.findById(id);
}
void deleteStudentById(Integer id) {
sri.deleteById(id);
}
void updateStudent(int id, String name, String addr) {
Optional<Student> optionalStudent = sri.findById(id);
if (optionalStudent.isPresent()) {
System.out.println("Student Found");
Student student = optionalStudent.get();
student.setName(name);
student.setAddr(addr);
sri.save(student);
} else {
System.out.println("Student not Found");
}
}
void deleteStudentsByIds(List<Integer> ids) {
sri.deleteAllById(ids);
}
void deleteAllStudents() {
sri.deleteAll();
}
}
